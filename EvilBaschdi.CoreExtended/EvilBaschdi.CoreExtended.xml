<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EvilBaschdi.CoreExtended</name>
    </assembly>
    <members>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.AppSettingFromConfigurationManager">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.AppSettingFromConfigurationManager.ValueFor(System.String)">
            <inheritdoc />
            <summary>
                Reads key value from app.config.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.AppSettingsBase">
            <inheritdoc />
            <summary>
                Classes to get values from or set values in AppSettingsBase
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.AppSettingsBase.#ctor(System.Configuration.SettingsBase)">
            <summary>
            </summary>
            <param name="settingsBase"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.AppSettingsBase.Get``1(System.String,``0)">
            <inheritdoc />
            <summary>
                Get value of type T
            </summary>
            <param name="setting"></param>
            <param name="fallback"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.AppSettingsBase.Set(System.String,System.Object)">
            <inheritdoc />
            <summary>
                Set value of type T
            </summary>
            <param name="setting"></param>
            <param name="value"></param>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.AutoStart">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.AutoStart.#ctor(System.String,System.String)">
            <summary>
                Constructor
            </summary>
            <param name="appName"></param>
            <param name="location">Assembly.GetExecutingAssembly().Location</param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.AutoStart.Enable">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.AutoStart.Disable">
            <inheritdoc />
        </member>
        <member name="P:EvilBaschdi.CoreExtended.AppHelpers.AutoStart.IsEnabled">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.AutoStartByConfiguration">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.AutoStartByConfiguration.#ctor(EvilBaschdi.CoreExtended.AppHelpers.IAppSettingFromConfigurationManager,EvilBaschdi.CoreExtended.AppHelpers.IAutoStart)">
            <summary>
                Constructor of the class
            </summary>
            <param name="appSettingFromConfigurationManager"></param>
            <param name="autoStart"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.AutoStartByConfiguration.Run">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.CurrentScreen">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.CurrentScreen.ValueFor(MahApps.Metro.Controls.MetroWindow)">
            <inheritdoc />
            <param name="metroWindow"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.IAppSettingFromConfigurationManager">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.IAppSettingsBase">
            <summary>
                Interface for classes to get values from or set values in AppSettingsBase
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.IAppSettingsBase.Get``1(System.String,``0)">
            <summary>
                Get value of type T
            </summary>
            <param name="setting"></param>
            <param name="fallback"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.IAppSettingsBase.Set(System.String,System.Object)">
            <summary>
                Set value of type T
            </summary>
            <param name="setting"></param>
            <param name="value"></param>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.IAutoStart">
            <summary>
                Manage AutoStart
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.AppHelpers.IAutoStart.IsEnabled">
            <summary>
                Is AutoStart enabled
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.IAutoStart.Enable">
            <summary>
                Enable AutoStart
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.IAutoStart.Disable">
            <summary>
                Disable AutoStart
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.IAutoStartByConfiguration">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.ICurrentScreen">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.IMoveToScreen">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.IScreenCapture">
            <summary>
                Provides functions to capture the entire screen, or a particular window, and save it to a file.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.IScreenCapture.CaptureScreen">
            <summary>
                Creates an Image object containing a screen shot of the entire desktop
            </summary>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.IScreenCapture.CaptureScreenToFile(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
                Captures a screen shot of the entire desktop, and saves it to a file
            </summary>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.IScreenCapture.CaptureWindow(System.IntPtr)">
            <summary>
                Creates an Image object containing a screen shot of a specific window
            </summary>
            <param name="handle">The handle to the window. (In windows forms, this is obtained by the Handle property)</param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.IScreenCapture.CaptureWindowToFile(System.IntPtr,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
                Captures a screen shot of a specific window, and saves it to a file
            </summary>
            <param name="handle"></param>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.IScreenCount">
            <inheritdoc />
            <summary>
                Interface for classes that provide the count of current connected screens of the current device / session.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.MoveToScreen">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.MoveToScreen.RunFor(MahApps.Metro.Controls.MetroWindow,System.String)">
            <inheritdoc />
            <param name="metroWindow"></param>
            <param name="deviceName"></param>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.ScreenCapture">
            <inheritdoc />
            <summary>
                Provides functions to capture the entire screen, or a particular window, and save it to a file.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.ScreenCapture.CaptureScreen">
            <inheritdoc />
            <summary>
                Creates an Image object containing a screen shot of the entire desktop
            </summary>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.ScreenCapture.CaptureWindow(System.IntPtr)">
            <inheritdoc />
            <summary>
                Creates an Image object containing a screen shot of a specific window
            </summary>
            <param name="handle">The handle to the window. (In windows forms, this is obtained by the Handle property)</param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.ScreenCapture.CaptureWindowToFile(System.IntPtr,System.String,System.Drawing.Imaging.ImageFormat)">
            <inheritdoc />
            <summary>
                Captures a screen shot of a specific window, and saves it to a file
            </summary>
            <param name="handle"></param>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.AppHelpers.ScreenCapture.CaptureScreenToFile(System.String,System.Drawing.Imaging.ImageFormat)">
            <inheritdoc />
            <summary>
                Captures a screen shot of the entire desktop, and saves it to a file
            </summary>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.ScreenCapture.Gdi32">
            <summary>
                Helper class containing Gdi32 API functions
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.ScreenCapture.User32">
            <summary>
                Helper class containing User32 API functions
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.AppHelpers.ScreenCount">
            <inheritdoc />
            <summary>
                Class that provides the count of current connected screens of the current device / session.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.AppHelpers.ScreenCount.Value">
            <inheritdoc />
            <summary>
                Count of current connected screens.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Browsers.ExplorerFolderBrowser">
            <inheritdoc />
            <summary>
                Stellt einen Auswahldialog für Ordner und Systemelemente ab Windows Vista bereit.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.ExplorerFolderBrowser.SelectedPath">
            <inheritdoc />
            <summary>
                Ruft den ausgewählten Ordnerpfad ab bzw. legt diesen fest.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.ExplorerFolderBrowser.SelectedElementName">
            <summary>
                Ruft den Anzeigenamen eines einzelnen, ausgewählten Elements ab.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.ExplorerFolderBrowser.SelectedPaths">
            <summary>
                Ruft ein Array mit Ordnerpfaden der ausgewählten Ordner ab.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.ExplorerFolderBrowser.SelectedElementNames">
            <summary>
                Ruft ein Array mit den Namen der ausgewählten Elemente ab.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.ExplorerFolderBrowser.AllowNonStoragePlaces">
            <summary>
                Ruft einen Wert ab der angibt ob auch Elemente ausgewählt werden können, die keine Ordner sind oder legt diesen
                fest.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.ExplorerFolderBrowser.Multiselect">
            <summary>
                Ruft einen Wert ab der angibt ob mehrere Elemente ausgewählt werden können oder legt diesen fest.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Browsers.ExplorerFolderBrowser.ShowDialog">
            <inheritdoc />
            <summary>
                Zeigt den Auswahldialog an.
            </summary>
            <returns><c>true</c> wenn der Benutzer die Ordnerauswahl bestätigte; andernfalls <c>false</c></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Browsers.ExplorerFolderBrowser.ShowDialog(System.Windows.Window)">
            <summary>
                Zeigt den Auswahldialog an.
            </summary>
            <param name="owner">Der Besitzer des Fensters</param>
            <returns><c>true</c> wenn der Benutzer die Ordnerauswahl bestätigte; andernfalls <c>false</c></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Browsers.ExplorerFolderBrowser.ShowDialog(System.Windows.Interop.IWin32Window)">
            <summary>
                Zeigt den Auswahldialog an.
            </summary>
            <param name="owner">Der Besitzer des Fensters</param>
            <returns><c>true</c> wenn der Benutzer die Ordnerauswahl bestätigte; andernfalls <c>false</c></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Browsers.ExplorerFolderBrowser.ShowDialog(System.IntPtr)">
            <summary>
                Zeigt den Auswahldialog an.
            </summary>
            <param name="owner">Der Besitzer des Fensters</param>
            <returns><c>true</c> wenn der Benutzer die Ordnerauswahl bestätigte; andernfalls <c>false</c></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Browsers.FolderBrowser">
            <inheritdoc />
            <summary>
                Class for FolderBrowser.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Browsers.FolderBrowser.ShowDialog">
            <inheritdoc />
            <summary>
                Shows FolderBrowser.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.FolderBrowser.SelectedPath">
            <inheritdoc />
            <summary>
                Get or Set selected path.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Browsers.IFolderBrowser">
            <summary>
                Interface for FolderBrowser.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.IFolderBrowser.SelectedPath">
            <summary>
                Get or Set selected path.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Browsers.IFolderBrowser.ShowDialog">
            <summary>
                Shows FolderBrowser.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Browsers.INetworkBrowser">
            <inheritdoc />
            <summary>
                Interface for NetworkBrowser.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.INetworkBrowser.Exception">
            <summary>
                Contains an Exception if Value has thrown some.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.INetworkBrowser.GetNetworkComputers">
            <summary>
                Contains an ArrayList of computers found in the network.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Browsers.NetworkBrowser">
            <inheritdoc />
            <summary>
                Class for NetworkBrowser.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.NetworkBrowser.Value">
            <inheritdoc />
            <summary>
                Contains an ArrayList of computers found in the network.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.NetworkBrowser.GetNetworkComputers">
            <inheritdoc />
            <summary>
                Contains an ArrayList of computers found in the network.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Browsers.NetworkBrowser.Exception">
            <inheritdoc />
            <summary>
                Contains an Exception if Value has thrown some.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Browsers.NetworkBrowser.NetServerEnum(System.String,System.Int32,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.Int32,System.String,System.Int32@)">
            <summary>
                NetServerEnum.
            </summary>
            <param name="serverName"></param>
            <param name="dwLevel"></param>
            <param name="pBuf"></param>
            <param name="dwPrefMaxLen"></param>
            <param name="dwEntriesRead"></param>
            <param name="dwTotalEntries"></param>
            <param name="dwServerType"></param>
            <param name="domain"></param>
            <param name="dwResumeHandle"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Browsers.NetworkBrowser.NetApiBufferFree(System.IntPtr)">
            <summary>
                NetApiBufferFree.
            </summary>
            <param name="pBuf"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Browsers.NetworkBrowser.ServerInfo">
            <summary>
                ServerInfo.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Converter.PackIconEntypoImageSourceConverter">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Converter.PackIconEntypoImageSourceConverter.CreateImageSource(System.Object,System.Windows.Media.Brush,System.Double)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="foregroundBrush"></param>
            <param name="penThickness"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Converter.PackIconFontAwesomeImageSourceConverter">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Converter.PackIconFontAwesomeImageSourceConverter.CreateImageSource(System.Object,System.Windows.Media.Brush,System.Double)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="foregroundBrush"></param>
            <param name="penThickness"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Converter.PackIconImageSourceConverterBase`1">
            <inheritdoc cref="T:System.Windows.Data.IValueConverter" />
            <inheritdoc cref="T:System.Windows.Markup.MarkupExtension" />
            <summary>
                Converts a PackIcon to an ImageSource.
                Use the ConverterParameter to pass a Brush.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Converter.PackIconImageSourceConverterBase`1.Thickness">
            <summary>
                Gets or sets the thickness to draw the icon with.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Converter.PackIconImageSourceConverterBase`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Converter.PackIconImageSourceConverterBase`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Converter.PackIconImageSourceConverterBase`1.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Converter.PackIconImageSourceConverterBase`1.CreateImageSource(System.Object,System.Windows.Media.Brush,System.Double)">
            <param name="value"></param>
            <param name="foregroundBrush"></param>
            <param name="penThickness"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Converter.PackIconMaterialImageSourceConverter">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Converter.PackIconMaterialImageSourceConverter.CreateImageSource(System.Object,System.Windows.Media.Brush,System.Double)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="foregroundBrush"></param>
            <param name="penThickness"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Converter.PackIconMaterialLightImageSourceConverter">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Converter.PackIconMaterialLightImageSourceConverter.CreateImageSource(System.Object,System.Windows.Media.Brush,System.Double)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="foregroundBrush"></param>
            <param name="penThickness"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Converter.PackIconModernImageSourceConverter">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Converter.PackIconModernImageSourceConverter.CreateImageSource(System.Object,System.Windows.Media.Brush,System.Double)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="foregroundBrush"></param>
            <param name="penThickness"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Converter.PackIconOcticonsImageSourceConverter">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Converter.PackIconOcticonsImageSourceConverter.CreateImageSource(System.Object,System.Windows.Media.Brush,System.Double)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="foregroundBrush"></param>
            <param name="penThickness"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.DialogService">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.DialogService.#ctor(MahApps.Metro.Controls.MetroWindow)">
            <summary>
                Constructor of the class
            </summary>
            <param name="mainWindow"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.DialogService.ShowMessage(System.String,System.String)">
            <inheritdoc />
            <param name="title"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.DialogService.ShowMessage(System.String,System.String,MahApps.Metro.Controls.Dialogs.MessageDialogStyle)">
            <inheritdoc />
            <param name="title"></param>
            <param name="message"></param>
            <param name="dialogStyle"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Extensions.ColorExtensions">
            <summary>
                HelperClass to extend Color functionality.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Extensions.ColorExtensions.Subtract(System.Byte,System.Int32)">
            <summary>
                Subtracts integers from byte.
            </summary>
            <param name="value"></param>
            <param name="integer"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Extensions.ColorExtensions.Add(System.Byte,System.Int32)">
            <summary>
                Adds integer to byte.
            </summary>
            <param name="value"></param>
            <param name="integer"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Extensions.ColorExtensions.ToColor(System.String)">
            <summary>
                Converts hex to Color.
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Extensions.Margins">
            <summary>
                Margins
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Extensions.RemoveChildExtension">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Extensions.RemoveChildExtension.RemoveChild(System.Windows.DependencyObject,System.Windows.UIElement)">
            <summary>
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.IDialogService">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.IDialogService.ShowMessage(System.String,System.String)">
            <summary>
            </summary>
            <param name="title"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.IDialogService.ShowMessage(System.String,System.String,MahApps.Metro.Controls.Dialogs.MessageDialogStyle)">
            <summary>
            </summary>
            <param name="title"></param>
            <param name="message"></param>
            <param name="dialogStyle"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Metro.ApplicationStyle">
            <inheritdoc />
            <summary>
                Class that handle metro style on Wpf.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.ApplicationStyle.#ctor(MahApps.Metro.Controls.MetroWindow,EvilBaschdi.CoreExtended.Metro.IApplicationStyleSettings,EvilBaschdi.CoreExtended.Metro.IThemeManagerHelper)">
            <summary>
                Handle metro style by ToggleSwitch.
            </summary>
            ///
            <param name="mainWindow" />
            <param name="applicationStyleSettings" />
            <param name="themeManagerHelper"></param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="mainWindow" /> is <see langword="null" />.
                <paramref name="applicationStyleSettings" /> is <see langword="null" />.
                <paramref name="themeManagerHelper" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.ApplicationStyle.#ctor(MahApps.Metro.Controls.MetroWindow,System.Windows.Controls.ComboBox,MahApps.Metro.Controls.ToggleSwitch,EvilBaschdi.CoreExtended.Metro.IApplicationStyleSettings,EvilBaschdi.CoreExtended.Metro.IThemeManagerHelper)">
            <summary>
                Handle metro style by ToggleSwitch.
            </summary>
            ///
            <param name="mainWindow" />
            <param name="accent" />
            <param name="themeSwitch" />
            <param name="applicationStyleSettings" />
            <param name="themeManagerHelper"></param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="mainWindow" /> is <see langword="null" />.
                <paramref name="accent" /> is <see langword="null" />.
                <paramref name="themeSwitch" /> is <see langword="null" />.
                <paramref name="applicationStyleSettings" /> is <see langword="null" />.
                <paramref name="themeManagerHelper" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.ApplicationStyle.Load(System.Boolean,System.Boolean)">
            <inheritdoc />
            <summary>
                Load.
            </summary>
            <param name="center"></param>
            <param name="resizeWithBorder400"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.ApplicationStyle.SetAccent(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <inheritdoc />
            <summary>
                Accent of application style.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.ApplicationStyle.SetTheme(System.Object)">
            <inheritdoc />
            <summary>
                Theme of application style.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.ApplicationStyle.SetTheme(System.Object,System.Windows.RoutedEventArgs)">
            <inheritdoc />
            <summary>
                Theme of application style.
            </summary>
            <param name="sender"></param>
            <param name="routedEventArgs"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.ApplicationStyle.SaveStyle">
            <inheritdoc />
            <summary>
                Save ApplicationStyle.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Metro.ApplicationStyle.Accent">
            <inheritdoc />
            <summary>
                ComboBox for choosing an accent.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Metro.ApplicationStyle.Theme">
            <inheritdoc />
            <summary>
                ToggleSwitch for choosing a theme.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.ApplicationStyle.SetStyle">
            <summary>
                Sets ApplicationStyle.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Metro.ApplicationStyleSettings">
            <inheritdoc />
            <summary>
                ApplicationSettings wrapper Interface implementation.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.ApplicationStyleSettings.#ctor(EvilBaschdi.CoreExtended.AppHelpers.IAppSettingsBase)">
            <summary>
                Constructor of the class.
            </summary>
            <param name="appSettingsBase"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Metro.ApplicationStyleSettings.Accent">
            <inheritdoc />
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Metro.ApplicationStyleSettings.Theme">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Metro.IApplicationStyle">
            <summary>
                Interface for classes that handle metro style on wpf.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Metro.IApplicationStyle.Accent">
            <summary>
                ComboBox for choosing an accent.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Metro.IApplicationStyle.Theme">
            <summary>
                ToggleSwitch for choosing a theme.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.IApplicationStyle.Load(System.Boolean,System.Boolean)">
            <summary>
                Load.
            </summary>
            <param name="center"></param>
            <param name="resizeWithBorder400"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.IApplicationStyle.SetAccent(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
                Accent of application style.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.IApplicationStyle.SetTheme(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
                Theme of application style.
            </summary>
            <param name="sender"></param>
            <param name="routedEventArgs"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.IApplicationStyle.SetTheme(System.Object)">
            <summary>
                Theme of application style.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.IApplicationStyle.SaveStyle">
            <summary>
                Save ApplicationStyle.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Metro.IApplicationStyleSettings">
            <summary>
                ApplicationSettings wrapper Interface.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Metro.IApplicationStyleSettings.Accent">
            <summary>
                MahApps ThemeManager Accent.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Metro.IApplicationStyleSettings.Theme">
            <summary>
                MahApps ThemeManager Theme.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Metro.IThemeManagerHelper">
            <summary>
                ThemeManagerHelper
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Metro.IThemeManagerHelper.AppUsesLightTheme">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.IThemeManagerHelper.CreateAppStyleFor(System.Windows.Media.Color,System.String)">
            <summary>
                Creates a new app style by color and name.
            </summary>
            <param name="color">Color to create app style for.</param>
            <param name="accentName">Name of the new app style.</param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.IThemeManagerHelper.RegisterSystemColorTheme">
            <summary>
                Gets Color of current (applied) system applicationStyleSettings, generates an app style and adds it to available
                accents.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Metro.ThemeManagerHelper">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.ThemeManagerHelper.CreateAppStyleFor(System.Windows.Media.Color,System.String)">
            <inheritdoc />
            <summary>
                Creates a new app style by color and name.
            </summary>
            <param name="color">Color to create app style for.</param>
            <param name="accentName">Name of the new app style.</param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Metro.ThemeManagerHelper.RegisterSystemColorTheme">
            <inheritdoc />
            <summary>
                Gets Color of current (applied) system applicationStyleSettings, generates an app style and adds it to available
                accents.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Metro.ThemeManagerHelper.AppUsesLightTheme">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Model.AboutWindowConfiguration">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Model.AboutWindowConfiguration.ApplicationTitle">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Model.AboutWindowConfiguration.Company">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Model.AboutWindowConfiguration.Copyright">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Model.AboutWindowConfiguration.Description">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Model.AboutWindowConfiguration.LogoSource">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Model.AboutWindowConfiguration.ProductName">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Model.AboutWindowConfiguration.Version">
            <summary>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Mvvm.AboutWindowContent">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.AboutWindowContent.#ctor(System.Reflection.Assembly,System.Windows.Media.Imaging.BitmapImage)">
            <summary>
                Constructor of the class
            </summary>
            <param name="assembly"></param>
            <param name="logoSource"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.AboutWindowContent.Value">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Mvvm.IAboutWindowContent">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Mvvm.ViewModel.AboutViewModel">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.AboutViewModel.#ctor(EvilBaschdi.CoreExtended.Mvvm.IAboutWindowContent)">
            <summary>
            </summary>
            <param name="aboutWindowContent"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.AboutViewModel.ApplicationTitle">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.AboutViewModel.Company">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.AboutViewModel.Copyright">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.AboutViewModel.Description">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.AboutViewModel.LogoSource">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.AboutViewModel.ProductName">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.AboutViewModel.Version">
            <summary>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel">
            <summary>
                ViewModel of ApplicationStyle.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.#ctor(EvilBaschdi.CoreExtended.Metro.IApplicationStyleSettings,EvilBaschdi.CoreExtended.Metro.IThemeManagerHelper)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.AppDoesNotUseSystemStyle">
            <summary>
                Is true if the app uses the style / accent from the current windows settings
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.AppUsesDarkTheme">
            <summary>
                Is true if radio button for dark theme is checked.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.SaveStyleSettings">
            <summary>
                CommandViewModel to save the accent and theme of the application.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.SettingsFlyoutIsOpen">
            <summary>
                Sets state of settings flyout.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.StyleAccent">
            <summary>
                Style accent.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.StyleAccents">
            <summary>
                Contains a list of style accents.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.ToggleFlyout">
            <summary>
                Toggle Flyout.
            </summary>
        </member>
        <member name="E:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.InitializeCommandViewModels">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.Load">
            <summary>
                Load
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.SetStyle">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.SaveStyle">
            <summary>
                Save ApplicationStyle.
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.ExecuteToggleFlyout">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ApplicationStyleViewModel.OnPropertyChanged(System.String)">
            <summary>
                INotifyPropertyChanged - method to synchronize UI and Property.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.DefaultCommand">
            <inheritdoc cref="T:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.ICommandViewModel" />
            <inheritdoc cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.DefaultCommand.Text">
            <inheritdoc />
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.DefaultCommand.ImagePath">
            <inheritdoc />
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.DefaultCommand.Command">
            <inheritdoc />
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.DefaultCommand.Visibility">
            <inheritdoc />
        </member>
        <member name="E:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.DefaultCommand.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.DefaultCommand.OnPropertyChanged(System.String)">
            <summary>
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.ICommandViewModel">
            <summary>
                Container for CommandViewmodel.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.ICommandViewModel.Command">
            <summary>
                Command to execute.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.ICommandViewModel.ImagePath">
            <summary>
                Imagepath if available.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.ICommandViewModel.Text">
            <summary>
                Displaytext from command.
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.ICommandViewModel.Visibility">
            <summary>
                Acutal visibility.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.RelayCommand">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.RelayCommand.#ctor(System.Action{System.Object})">
            <summary>
            </summary>
            <param name="execute"></param>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.RelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="E:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.RelayCommand.CanExecuteChanged">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.RelayCommand.CanExecute(System.Object)">
            <summary>
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.ViewModel.Command.RelayCommand.Execute(System.Object)">
            <summary>
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ControlContent">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ControlContent.Content">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ControlContent.FillBrush">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ControlContent.ImageResourceName">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.CoreExtended.Mvvm.ViewModel.ControlContent.ImageSize">
            <summary>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Mvvm.View.AboutWindow">
            <inheritdoc cref="T:MahApps.Metro.Controls.MetroWindow" />
            <summary>
                Interaction logic for AboutWindow.xaml
            </summary>
            <summary>
            AboutWindow
            </summary>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.View.AboutWindow.#ctor">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Mvvm.View.AboutWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c>null</c> sometimes,
                so the check for <c>null</c> is necessary before its usage
            </summary>
            <example>
                <code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
                <code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.StringFormatMethodAttribute">
            <summary>
                Indicates that the marked method builds string by format pattern and (optional) arguments.
                Parameter, which contains format string, should be given in constructor. The format string
                should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:EvilBaschdi.CoreExtended.Properties.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
                Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be string literal and match one
                of the parameters of the caller function. For example, ReSharper annotates
                the parameter of <see cref="T:System.ArgumentNullException" />
            </summary>
            <example>
                <code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the method is contained in a type that implements
                <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface
                and this method is used to notify that some property value changed
            </summary>
            <remarks>
                The method should be non-static and conform to one of the supported signatures:
                <list>
                    <item>
                        <c>NotifyChanged(string)</c>
                    </item>
                    <item>
                        <c>NotifyChanged(params string[])</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T}(Expression{Func{T}})</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                    </item>
                    <item>
                        <c>SetProperty{T}(ref T, T, string)</c>
                    </item>
                </list>
            </remarks>
            <example>
                <code>
              public class Foo : INotifyPropertyChanged {
                public event PropertyChangedEventHandler PropertyChanged;
                [NotifyPropertyChangedInvocator]
                protected virtual void NotifyChanged(string propertyName) { ... }
            
                private string _name;
                public string Name {
                  get { return _name; }
                  set { _name = value; NotifyChanged("LastName"); /* Warning */ }
                }
              }
              </code>
                Examples of generated notifications:
                <list>
                    <item>
                        <c>NotifyChanged("Property")</c>
                    </item>
                    <item>
                        <c>NotifyChanged(() =&gt; Property)</c>
                    </item>
                    <item>
                        <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                    </item>
                    <item>
                        <c>SetProperty(ref myField, value, "Property")</c>
                    </item>
                </list>
            </example>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output
            </summary>
            <syntax>
                <p>Function Definition Table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If method has single input parameter, it's name could be omitted.<br />
                Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
                for method output means that the methos doesn't return normally.<br />
                <c>canbenull</c> annotation is only applicable for output parameters.<br />
                You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
                or use single attribute with rows separated by semicolon.<br />
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data)
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.LocalizationRequiredAttribute">
            <summary>
                Indicates that marked element should be localized or not
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of the marked type (or its derivatives)
                cannot be compared using '==' or '!=' operators and <c>Equals()</c>
                should be used instead. However, using '==' or '!=' for comparison
                with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.BaseTypeRequiredAttribute">
            <summary>
                When applied to a target attribute, specifies a requirement for any type marked
                with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly
                (e.g. via reflection, in external library), so this symbol
                will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.MeansImplicitUseAttribute">
            <summary>
                Should be used on attributes and causes ReSharper
                to not mark symbols marked with such attributes as unused
                (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:EvilBaschdi.CoreExtended.Properties.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:EvilBaschdi.CoreExtended.Properties.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:EvilBaschdi.CoreExtended.Properties.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:EvilBaschdi.CoreExtended.Properties.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered used implicitly
                when marked with <see cref="T:EvilBaschdi.CoreExtended.Properties.MeansImplicitUseAttribute" />
                or <see cref="T:EvilBaschdi.CoreExtended.Properties.UsedImplicitlyAttribute" />
            </summary>
        </member>
        <member name="F:EvilBaschdi.CoreExtended.Properties.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:EvilBaschdi.CoreExtended.Properties.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.PublicAPIAttribute">
            <summary>
                This attribute is intended to mark publicly available API
                which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled
                when the invoked method is on stack. If the parameter is a delegate,
                indicates that delegate is executed while the method is executed.
                If the parameter is an enumerable, indicates that it is enumerated
                while the method is executed
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example>
                <code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.PathReferenceAttribute">
            <summary>
                Indicates that a parameter is a path to a file or a folder
                within a web project. Path can be relative or absolute,
                starting from web root (~)
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcActionAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC action. If applied to a method, the MVC action name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcAreaAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcControllerAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that
                the parameter is an MVC controller. If applied to a method,
                the MVC controller name is calculated implicitly from the context.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcMasterAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcModelTypeAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcPartialViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that
                the parameter is an MVC partial view. If applied to a method,
                the MVC partial view name is calculated implicitly from the context.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcSupressViewErrorAttribute">
            <summary>
                ASP.NET MVC attribute. Allows disabling all inspections
                for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcDisplayTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcEditorTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
                Use this attribute for custom wrappers similar to
                <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view. If applied to a method, the MVC view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.AspMvcActionSelectorAttribute">
            <summary>
                ASP.NET MVC attribute. When applied to a parameter of an attribute,
                indicates that this parameter is an MVC action name
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:EvilBaschdi.CoreExtended.Properties.RazorSectionAttribute">
            <summary>
                Razor attribute. Indicates that a parameter or a method is a Razor section.
                Use this attribute for custom wrappers similar to
                <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
    </members>
</doc>
